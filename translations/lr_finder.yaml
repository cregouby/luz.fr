title:
  original: Learning Rate Finder
  translation: Recherche du taux d'apprentissage
arguments:
  object:
    original: An nn_module that has been setup().
    translation: Un module nn qui a été configuré par \code{setup()}.
  data:
    original: (dataloader) A dataloader created with torch::dataloader()  used for
      learning rate finding.
    translation: (dataloader) Un dataloader créé avec torch::dataloader(), utilisé
     pour le recherche de taux d'apprentissage.
  steps:
    original: '(integer) The number of steps to iterate over in the learning rate
      finder. Default: 100.'
    translation: |
      (entier) Le nombre d'itérations pour la recherche de taux d'apprentissage. Défaut : 100.
  start_lr:
    original: '(float) The smallest learning rate. Default: 1e-7.'
    translation: |
      (réel) Le plus petit taux d'apprentissage. Défaut : 1e-7.
  end_lr:
    original: '(float) The highest learning rate. Default: 1e-1.'
    translation: |
      (réel) Le plus grand taux d'apprentissage. Défaut : 1e-1.
  log_spaced_intervals:
    original: '(logical) Whether to divide the range between start_lr and end_lr into
      log-spaced intervals (alternative: uniform intervals). Default: TRUE'
    translation: |
      (booléen) Doit-on découper logarithmiquement l'intervalle entre start_lr et end_lr  (Si FALSE : intervalles uniformes). Défaut : TRUE
  '...':
    original: Other arguments passed to \code{fit}.
    translation: Autres arguments passés à \code{fit}.
  verbose:
    original: Wether to show a progress bar during the process.
    translation: Doit-on afficher un barre de progression pendant la recherche.
value:
  original: |
    A dataframe with two columns: learning rate and loss
  translation: |
    Un dataframe de deux colonnes : taux d'apprentissage et valeur de la fonction de perte
description:
  original: |
    Learning Rate Finder
  translation: |
    Recherche du taux d'apprentissage
examples:
  original: |
    if (torch::torch_is_installed()) {
    library(torch)
    ds <- torch::tensor_dataset(x = torch_randn(100, 10), y = torch_randn(100, 1))
    dl <- torch::dataloader(ds, batch_size = 32)
    model <- torch::nn_linear
    model <- model %>% setup(
      loss = torch::nn_mse_loss(),
      optimizer = torch::optim_adam
    ) %>%
      set_hparams(in_features = 10, out_features = 1)
    records <- lr_finder(model, dl, verbose = FALSE)
    plot(records)
    }
  translation: ~
untranslatable:
- alias
- name
- keyword
- concept
- usage
