title:
  original: Creates a new luz metric
  translation: Crée une nouvelle métrique luz
  name:
    original: string naming the new metric.
    translation: Chaîne de caractères définissant le nom de la métrique.
  private:
    original: |-
      An optional list of private members, which can be functions
      and non-functions.
    translation: |-
      Liste optionnelle d'objets privés, qui peuvent être des fonctions et non-des fonctions.
  active:
    original: An optional list of active binding functions.
    translation: Une liste optionnelle de fonctions d'active binding.
  parent_env:
    original: |-
      An environment to use as the parent of newly-created
      objects.
    translation: |-
      Environnement à utiliser comme parent pour les objets 
      nouvellement créés.
  inherit:
    original: |-
      A R6ClassGenerator object to inherit from; in other words, a
      superclass. This is captured as an unevaluated expression which is
      evaluated in \code{parent_env} each time an object is instantiated.
    translation: |-
      Un objet R6ClassGenerator duquel hériter; autrement dit, une super-classe.
      Cela est capturé comme une expression non-évaluée qui sera évaluée dans
      \code{parent_env} chaque fois qu'un objet est instancié.
  ...:
    original: |-
      named list of public methods. You should implement at least
      \code{initialize}, \code{update} and \code{compute}. See the details section for more
      information.
    translation: |-
      liste nomée de méthodes publiques. Vous devez implémenter au moins
      \code{initialize}, \code{update} et \code{compute}. Voir la section Détails pour plus d'informations.

value:
  original: |
    Returns new luz metric.
  translation: |
    Renvoie la nouvelle métrique luz.
description:
  original: |
    Creates a new luz metric
  translation: |
    Crée une nouvelle métrique luz
details:
  original: "In order to implement a new \\code{luz_metric} we need to implement 3
    methods:\n\\itemize{\n\\item \\code{initialize}: defines the metric initial state.
    This function is\ncalled for each epoch for both training and validation loops.\n\\item
    \\code{update}: updates the metric internal state. This function is called\nat
    every training and validation step with the predictions obtained by\nthe model
    and the target values obtained from the dataloader.\n\\item \\code{compute}: uses
    the internal state to compute metric values. This\nfunction is called whenever
    we need to obtain the current metric\nvalue. Eg, it’s called every training step
    for metrics displayed in\nthe progress bar, but only called once per epoch to
    record it’s value\nwhen the progress bar is not displayed.\n}\n\nOptionally, you
    can implement an \\code{abbrev} field that gives the metric an\nabbreviation that
    will be used when displaying metric information in the\nconsole or tracking record.
    If no \\code{abbrev} is passed, the class name\nwill be used.\n\nLet’s take a
    look at the implementation of \\code{luz_metric_accuracy} so you\ncan see how
    to implement a new one:\n\n\\if{html}{\\out{<div class=\"sourceCode r\">}}\\preformatted{luz_metric_accuracy
    <- luz_metric(\n  # An abbreviation to be shown in progress bars, or \n  # when
    printing progress\n  abbrev = \"Acc\", \n  # Initial setup for the metric. Metrics
    are initialized\n  # every epoch, for both training and validation\n  initialize
    = function() {\n    self$correct <- 0\n    self$total <- 0\n  },\n  # Run at every
    training or validation step and updates\n  # the internal state. The update function
    takes `preds`\n  # and `target` as parameters.\n  update = function(preds, target)
    {\n    pred <- torch::torch_argmax(preds, dim = 2)\n    self$correct <- self$correct
    + (pred == target)$\n      to(dtype = torch::torch_float())$\n      sum()$\n      item()\n
    \   self$total <- self$total + pred$numel()\n  },\n  # Use the internal state
    to query the metric value\n  compute = function() {\n    self$correct/self$total\n
    \ }\n)\n}\\if{html}{\\out{</div>}}\n\n\\strong{Note}: It’s good practice that
    the \\code{compute} metric returns regular R\nvalues instead of torch tensors
    and other parts of luz will expect that.\n"
  translation: "Pour implémenter un nouveau \\code{luz_metric}, il faut implémenter 3 
    méthodes:\n\\itemize{\n\\item \\code{initialize}: définit l'état initial de la métrique. 
    Cette fonction est\nappelée pour chaque époque dans les boucles d'entraînement et de 
    validation.\n\\item \\code{update}: met à jour l'état interne de la métrique. Cette 
    fonction est appelée\nà chaque étape d'entraînement et de validation avec les prédictions 
    obtenues par le modèle\net les valeurs cibles obtenues à partir du chargeur de donnée.\n
    \\item \\code{compute}: utilise l'état interne pour calculer les valeurs du métrique. 
    Cette\nfonction est appelée chaque fois que nous devons obtenir la valeur actuelle du métrique.
    \nEg, elle est appelée chaque étape d'entraînement pour les métriques affichées dans la\nbare 
    de progression, mais uniquement appelée une fois par époque pour enregistrer sa valeur\nlorsque 
    la bare de progression n'est pas affichée.\n}\n\nOptionnellement, vous pouvez implémenter 
    un champ \\code{abbrev} qui donne à la métrique un abrégé que l'on utilisera lors de l'\n
    affichage d'informations sur les métriques dans le console ou enregistrer.\nSi aucun 
    \\code{abbrev} n'est passé, le nom de classe sera utilisé.\n\n Voyons comment implémenter 
    \\code{luz_metric_accuracy} pour voir comment implémenter une nouvelle métrique:\n\n\\if{html}
    {\\out{<div class=\"sourceCode r\">}}\\preformatted{luz_metric_accuracy <- luz_metric(\n  
    # L'abbréviation qui doit appraître dans la barre de progression, ou\n# # quand on affiche la 
    progression\n  abbrev = \"Acc\", \n  # Première initialisation de la métrique. elle sera 
    réinitialisée\n  # à chaque époque, pour les boucles d'entraînement et de 
    validation\n  initialize = function() {\n    self$correct <- 0\n    self$total <- 0\n  },\n  
    # Calcul à chaque étape de l'entraînement et de la validation, et\n  
    # mise à jour des états internes. la fonction utilise les paramêtres \n  
    # `preds` et `target`.\n  
    update = function(preds, target) {\n    pred <- torch::torch_argmax(preds, dim = 2)\n    
    self$correct <- self$correct + (pred == target)$\n      to(dtype = torch::torch_float())$\n      
    sum()$\n      item()\n    \   self$total <- self$total + pred$numel()\n  },\n  
    # Utilise les états interne pour le calcul de la métrique\n  compute = function() {\n    
    self$correct/self$total\n  }\n)\n}\\if{html}{\\out{</div>}}\n\n\nstrong{Note} : Il est recommandé 
    que le métrique \\code{compute} renvoie des valeurs régulières R au lieu de tenseurs torch car 
    c'est ce qui est attendu par les autres parties de luz.\n"
examples:
  original: |-
    luz_metric_accuracy <- luz_metric(
      # An abbreviation to be shown in progress bars, or
      # when printing progress
      abbrev = "Acc",
      # Initial setup for the metric. Metrics are initialized
      # every epoch, for both training and validation
      initialize = function() {
        self$correct <- 0
        self$total <- 0
      },
      # Run at every training or validation step and updates
      # the internal state. The update function takes `preds`
      # and `target` as parameters.
      update = function(preds, target) {
        pred <- torch::torch_argmax(preds, dim = 2)
        self$correct <- self$correct + (pred == target)$
          to(dtype = torch::torch_float())$
          sum()$
          item()
        self$total <- self$total + pred$numel()
      },
      # Use the internal state to query the metric value
      compute = function() {
        self$correct/self$total
      }
    )
  translation: |-
    luz_metric_accuracy <- luz_metric(
      # L'abbréviation qui doit appraître dans la barre de progression, ou
      # quand on affiche la progression
      abbrev = "Acc",
      # Première initialisation de la métrique. elle sera réinitialisée
      # à chaque époque, pour les boucles l'entraînement et de validation
      initialize = function() {
        self$correct <- 0
        self$total <- 0
      },
      # Calcul à chaque étape de l'entraînement et de la validation, et 
      # mise à jour des états internes. la fonction utilise les paramêtres 
      # `preds` et `target`.
      update = function(preds, target) {
        pred <- torch::torch_argmax(preds, dim = 2)
        self$correct <- self$correct + (pred == target)$
          to(dtype = torch::torch_float())$
          sum()$
          item()
        self$total <- self$total + pred$numel()
      },
      # Utilise les états interne pour le calcul de la métrique
      compute = function() {
        self$correct/self$total
      }
    )

seealso:
  original: "Other luz_metrics: \n\\code{\\link{luz_metric_accuracy}()},\n\\code{\\link{luz_metric_binary_accuracy_with_logits}()},\n\\code{\\link{luz_metric_binary_accuracy}()},\n\\code{\\link{luz_metric_binary_auroc}()},\n\\code{\\link{luz_metric_mae}()},\n\\code{\\link{luz_metric_mse}()},\n\\code{\\link{luz_metric_multiclass_auroc}()},\n\\code{\\link{luz_metric_rmse}()}\n"
  translation: "Autres métriques de luz: \n\\code{\\link{luz_metric_accuracy}()},\n\\code{\\link{luz_metric_binary_accuracy_with_logits}()},\n\\code{\\link{luz_metric_binary_accuracy}()},\n\\code{\\link{luz_metric_binary_auroc}()},\n\\code{\\link{luz_metric_mae}()},\n\\code{\\link{luz_metric_mse}()},\n\\code{\\link{luz_metric_multiclass_auroc}()},\n\\code{\\link{luz_metric_rmse}()}\n"
untranslatable:
- alias
- name
- keyword
- concept
- usage
