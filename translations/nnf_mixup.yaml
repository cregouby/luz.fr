title:
  original: Mixup logic
  translation: ~
arguments:
  x:
    original: an input batch
    translation: ~
  'y':
    original: a target batch
    translation: ~
  weight:
    original: weighting coefficient to be used by \code{torch_lerp()}
    translation: ~
value:
  original: |
    A \code{list} of:
    \itemize{
    \item \code{x}, the new, mixed-up input batch
    \item \code{y}, a \code{list} of:
    \itemize{
    \item \code{ys}, a \code{list} of:
    \itemize{
    \item \code{y1}, the original target \code{y1}
    \item \code{y2}, the mixed-in target \code{y2}
    }
    \item \code{weight}, the mixing weights
    }
    }
  translation: ~
description:
  original: |
    Logic underlying \code{\link[=luz_callback_mixup]{luz_callback_mixup()}}.
  translation: ~
details:
  original: |
    Based on the passed-in input and target batches, as well as applicable mixing weights,
    we return new tensors intended to replace the current batch.
    The new input batch is a weighted linear combination of input batch items, while
    the new target batch bundles the original targets, as well as the mixing weights, in
    a nested list.
  translation: ~
examples:
  original: |+
    if (torch::torch_is_installed()) {
    batch_x <- torch::torch_randn(c(10, 768))
    batch_y <- torch::torch_randn(10)
    weight <- torch::torch_tensor(rep(0.9, 10))$view(c(10, 1))
    nnf_mixup(batch_x, batch_y, weight)
    }

  translation: ~
seealso:
  original: |
    \code{\link[=luz_callback_mixup]{luz_callback_mixup()}}
  translation: ~
untranslatable:
- alias
- name
- keyword
- concept
- usage
